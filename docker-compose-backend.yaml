services:
  # MongoDB Service for Question Service
  mongo:
    image: mongo:latest
    container_name: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    ports:
      - "27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network

  # Seed MongoDB server with sample questions
  mongo-seed:
    build: ./mongo-seed
    container_name: mongo-seed
    volumes:
      - ./mongo-seed:/mongo-seed
    depends_on:
      user-service:
        condition: service_healthy
      question-service:
        condition: service_started
    networks:
      - app-network

  # QuestionService
  question-service:
    build: ./QuestionService
    container_name: question-service
    ports:
      - "3000"
    environment:
      - MONGO_URI=mongodb://root:example@mongo:27017/
    depends_on:
      - mongo
    networks:
      - app-network

  # MongoDB Service for UserService
  mongo_user:
    image: mongo:latest
    container_name: mongo_user
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    ports:
      - "27017"
    volumes:
      - mongo-user-data:/data/db
    networks:
      - app-network

  # UserService
  user-service:
    build: ./UserService
    container_name: user-service
    ports:
      - "3001"
    environment:
      - DB_LOCAL_URI=mongodb://root:example@mongo_user:27017
      - ENV=DEV
      - JWT_SECRET=you-can-replace-this-with-your-own-secret
    depends_on:
      - mongo_user
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MatchingService
  matching-service:
    build: ./MatchingService
    container_name: MatchingService
    ports:
      - "3000"
    depends_on:
      - rabbitmq
      - redis
    networks:
      - app-network

  # Messaging Queue for MatchingService
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672"
      - "15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network

  # Distrbuted Cache for MatchingService
  redis:
    image: redis:alpine
    container_name: redis
    depends_on:
      - rabbitmq
    ports:
      - "6379"
    networks:
      - app-network

  # CollaborationService
  collaboration-service:
    build: ./CollaborationService
    container_name: CollaborationService
    ports:
      - "3002"
    depends_on:
      - rabbitmq
    networks:
      - app-network

  # Distributed Cache for CollaborationService
  redis-collaboration:
    image: redis:alpine
    container_name: redis-collaboration
    depends_on:
      - rabbitmq
    ports:
      - "6379"
    networks:
      - app-network

  # ChatService
  chat-service:
    build: ./ChatService
    container_name: ChatService
    ports:
      - "3003"
    networks:
      - app-network

  redis-chat:
    image: redis:alpine
    container_name: redis-chat
    ports:
      - "6379"
    networks:
      - app-network

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
      - "3000:3000"
      - "3002:3002"
      - "3003:3003"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - question-service
      - user-service
      - matching-service
      - collaboration-service
    networks:
      - app-network

volumes:
  mongo-data:
    driver: local
  mongo-seed:
    driver: local
  mongo-user-data:
    driver: local

networks:
  app-network:
    driver: bridge
